{"version":3,"sources":["hooks/useForm.js","components/ContactForm/validationRules.js","components/ContactForm/styles.js","components/ContactForm/index.js"],"names":["useForm","validate","useState","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","type","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","url","CONFIG","contacts","email","axios","post","then","test","TitleTop","styled","Title","theme","background","TitleBottom","text","TitleContainer","Col","ContactContainer","div","Contact","section","FormGroup","form","margin","accent","secondary","main","FormTitle","Subtitle","Span","span","ButtonContainer","Input","lazy","Button","TextArea","withTranslation","title","id","t","subtitle","ValidationType","ErrorMessage","cascade","splitTitle","split","top","bottom","getSplitTitle","justify","align","autoComplete","onSubmit","placeholder","onChange"],"mappings":"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","file":"static/js/17.ccd369eb.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\nimport CONFIG from 'Config'\r\n\r\nconst useForm = (validate) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    // Your url for API\r\n    const url = `https://mailthis.to/${CONFIG.contacts.email}`;\r\n    if (Object.keys(values).length === 3) {\r\n      axios\r\n        .post(url, {\r\n          ...values,\r\n        })\r\n        .then(() => {\r\n          setShouldSubmit(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon(\"success\");\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n\r\nexport default useForm;\r\n","export default function validate(values) {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from 'styled-components';\r\nimport { Title, Subtitle, Col } from \"Common\";\r\n\r\nexport const TitleTop = styled(Title)`\r\nposition: relative;\r\nbottom: calc(72px * 1.75);\r\ncolor:${({theme}) => theme.background}`\r\n\r\nexport const TitleBottom = styled(Title)`\r\n  color: ${({ theme }) => theme.text};\r\n  position: relative;\r\n  bottom: calc(72px);\r\n`;\r\n\r\nexport const  TitleContainer = styled(Col)`\r\nheight: 100%;\r\nflex: 1;\r\nmax-width: 50%;\r\njustify-content: space-between`\r\n\r\nexport const ContactContainer = styled.div`\r\n  padding: 5rem 0;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Contact = styled.section`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 1280px;\r\n`;\r\n\r\nexport const IconContainer = styled.div`\r\n  @media only screen and (min-width: 980px) {\r\n    padding: 10rem 7rem;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled.form`\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.background};\r\n  padding: ${({ theme }) => theme.margin * 2}px;\r\n  padding-bottom: ${({ theme }) => theme.margin * 4}px;\r\n  max-width: 520px;\r\n  border: 1px solid ${({ theme }) => theme.accent.secondary};\r\n  transition: all 0.5s;\r\n  box-shadow: none;\r\n  &:hover {\r\n    box-shadow: 0px -2px 10px ${({ theme }) => theme.accent.main};\r\n    border: 1px solid ${({ theme }) => theme.accent.main};\r\n  }\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const FormTitle = styled(Subtitle)`\r\n  color: ${({ theme }) => theme.accent.secondary};\r\n  margin: ${({ theme }) => theme.margin}px;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  display: block;\r\n  font-family: 'Ubuntu', sans-serif;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  text-align: end;\r\n  position: relative;\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { lazy } from \"react\";\r\nimport { Row,Col } from \"antd\";\r\nimport Zoom from \"react-reveal/Zoom\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport useForm from \"Hooks/useForm\";\r\nimport validate from \"./validationRules\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\nconst Input = lazy(() => import(\"../../common/Input\"));\r\nconst Button = lazy(() => import(\"../../common/Button\"));\r\nconst TextArea = lazy(() => import(\"../../common/TextArea\"));\r\n\r\nconst Contact = ({ title, id, t, subtitle }) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }) => {\r\n    const ErrorMessage = errors[type];\r\n    return errors[type] ? (\r\n      <Zoom cascade>\r\n        <S.Span>{ErrorMessage}</S.Span>\r\n      </Zoom>\r\n    ) : (\r\n      <S.Span />\r\n    );\r\n  };\r\n  const getSplitTitle = () => {\r\n    const splitTitle = t(title).split(\"\\n\");\r\n    return {\r\n      top: splitTitle?.[0] || \"\",\r\n      bottom: splitTitle?.[1] || \"\",\r\n    };\r\n  };\r\n\r\n  const splitTitle = getSplitTitle();\r\n  return (\r\n    <S.ContactContainer id={id}>\r\n      <S.Contact>\r\n        <Row type=\"flex\" justify=\"space-between\" align=\"middle\">\r\n          <S.TitleContainer>\r\n            <S.TitleTop>{splitTitle.top}</S.TitleTop>\r\n            <S.TitleBottom>{splitTitle.bottom}</S.TitleBottom>\r\n          </S.TitleContainer>\r\n          <Col>\r\n            <S.FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <S.FormTitle>{t(subtitle)}</S.FormTitle>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"Name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  id=\"Email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  id=\"Message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <S.ButtonContainer>\r\n                <Button name=\"submit\" type=\"submit\">\r\n                  {t(\"send\")}\r\n                </Button>\r\n              </S.ButtonContainer>\r\n            </S.FormGroup>\r\n          </Col>\r\n        </Row>\r\n      </S.Contact>\r\n    </S.ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"sourceRoot":""}